#
# Quick start:
#   rake awdwr:dashboard -- installs, configures, and starts a dashboard
#   rake awdwr:shell     -- shells into the main (dashboard) container
#   rake clobber         -- removes all containers, images, etc
#
# Containers:
#   awdwr-mysql: a mysql server
#   awdwr-main:  runs the dashboard and can be shelled into
#
# Ports:
#   3333: dashboard, visit http://localhost:3333/ to see the dashboard
#   3334: rails server (maps to port 3000 on the container)
#
# Networks:
#   awdwr: used to connect the main dashboard container to mysql
#
# Volumes:
#   awdwr-main: testrails "edition4" work directory
#

namespace :mysql do
  task :setup => 'awdwr:network' do
    next if `docker container ls -a`.include? 'awdwr-mysql'
    sh "docker run --network awdwr --name awdwr-mysql " +
      "-e MYSQL_ROOT_PASSWORD=root -d mysql/mysql-server"

    # wait for container to initialize
    240.times do
      sleep 0.5
      status = `docker container ls`[/\((.*?)\).*awdwr-mysql/, 1]
      break if status == 'healthy'
      putc '.'
    end
    puts

    # grant permissions
    cmd = '|docker exec -i awdwr-mysql mysql --user=root --password=root'
    open(cmd, 'w') do |f|
      f.write "CREATE USER 'username' IDENTIFIED BY 'password';\n"
      f.write "GRANT ALL PRIVILEGES ON depot_production.* TO 'username';\n"
      f.write "SHOW GRANTS FOR 'username';\n"
      f.write "CREATE USER 'awdwr';\n"
      f.write "GRANT ALL PRIVILEGES ON depot_production.* TO 'awdwr';\n"
    end
  end

  task :clobber => :stop do
    next unless `docker container ls -a`.include? 'awdwr-mysql'
    system "docker stop awdwr-mysql"
    system "docker container rm awdwr-mysql"
  end

  task :logs do
    system "docker logs awdwr-mysql"
  end

  task :shell => :setup do
    system "docker exec -it awdwr-mysql /bin/bash"
  end

  task :client => :setup do
    system "docker exec -it awdwr-mysql mysql --user=root --password=root"
  end

  task :start => :setup

  task :restart => :start do
    next if `docker ps`.include? 'awdwr-mysql'
    container=`docker ps -q -a --filter name=awdwr-mysql`.chomp
    system "docker start #{container}" unless container.empty?
  end

  task :stop do
    next unless `docker ps`.include? 'awdwr-mysql'
    container=`docker ps -q --filter name=awdwr-mysql`.chomp
    system "docker stop #{container}" unless container.empty?
  end
end

namespace :awdwr do
  task :network do
    next if `docker network ls`.include? 'awdwr'
    system 'docker network create awdwr'
  end

  task :build => ['mysql:setup', :network] do
    sh 'docker build --tag awdwr-main --network awdwr .'
  end

  task :rebuild => [:clean, :build, :dashboard, 'rake:clean']

  task :volume do
    next if `docker volume ls`.include? 'awdwr-main'
    system "docker volume create awdwr-main"
  end

  task :dashboard => [:volume, :network] do
    unless `docker image ls`.include? 'awdwr-main'
      Rake::Task["awdwr:build"].execute
    end

    unless `docker ps -a`.include? 'awdwr-main'
      awdwr = File.expand_path("..", __dir__)
      sh %W(
        docker run --name awdwr-main
        --publish 3333:3333 --publish 3334:3000
        --volume #{awdwr}:/srv/awdwr:delegated
        --mount source=awdwr-main,target=/home/awdwr/git/awdwr/edition4/work
        --workdir /home/awdwr/git/awdwr
        --network awdwr
        --env MYSQL_HOST=awdwr-mysql
        --detach awdwr-main
        /bin/bash --login -c "shotgun -p 3333 -o 0.0.0.0 dashboard.ru"
      ).join(' ')
    end
  end

  task :logs do
    system "docker logs awdwr-main"
  end

  task :shell do
    unless `docker ps -a`.include? 'awdwr-main'
      Rake::Task["awdwr:dashboard"].execute
    end

    if `docker ps -q --filter name=awdwr-main`.chomp.empty?
      container=`docker ps -aq --filter name=awdwr-main`.chomp
      system "docker start #{container}"
    end

    system "docker exec -it awdwr-main bash"
  end

  task :test => :dashboard do
    system 'docker exec -it awdwr-main bash --login -i -c testrails'
  end

  task :kill do
    next unless `docker ps`.include? 'awdwr-main'
    container=`docker ps -q --filter name=awdwr-main`.chomp
    system "docker container kill #{container}" unless container.empty?

    container=`docker ps -aq --filter name=awdwr-main`.chomp
    system "docker container rm #{container}" unless container.empty?
  end

  task :clean => :kill do
    if `docker image ls`.include? 'awdwr-main'
      system "docker image rm awdwr-main"
    end
  end

  task :clobber => :clean do
    if `docker network ls`.include? 'awdwr'
      system "docker network rm awdwr"
    end

    if `docker volume ls`.include? 'awdwr-main'
      system "docker volume rm awdwr-main"
    end
  end
end

task :clean do
  sh 'docker container prune --force'
  sh 'docker image prune --force'
end

task :clobber do
  Rake::Task["awdwr:clobber"].execute
  Rake::Task["mysql:clobber"].execute
  Rake::Task["clean"].execute
end

task :default => 'awdwr:build'
