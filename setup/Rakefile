namespace :mysql do
  task :setup do
    next if `docker container ls -a`.include? 'awdwr-mysql'
    sh "docker run --network host --name awdwr-mysql " +
      "-e MYSQL_ROOT_PASSWORD=root -d mysql/mysql-server"

    # wait for container to initialize
    240.times do
      sleep 0.5
      status = `docker container ls`[/\((.*?)\).*awdwr-mysql/, 1]
      break if status == 'healthy'
      putc '.'
    end
    puts

    # grant permissions
    cmd = '|docker exec -i awdwr-mysql mysql --user=root --password=root'
    open(cmd, 'w') do |f|
      f.write "CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';\n"
      f.write "GRANT ALL PRIVILEGES ON depot_production.* TO " +
        "'username'@'localhost';\n"
      f.write "show grants for 'username'@'localhost';\n"
    end
  end

  task :clobber => :stop do
    next unless `docker container ls`.include? 'awdwr-mysql'
    system "docker stop awdwr-mysql"
    system "docker container rm awdwr-mysql"
  end

  task :logs do
    system "docker logs awdwr-mysql"
  end

  task :ssh => :setup do
    system "docker exec -it awdwr-mysql mysql --user=root --password=root"
  end

  task :start => :setup

  task :restart => :start do
    next if `docker ps`.include? 'awdwr-mysql'
    container=`docker ps -q -a --filter name=awdwr-mysql`.chomp
    system "docker start #{container}" unless container.empty?
  end

  task :stop do
    next unless `docker ps`.include? 'awdwr-mysql'
    container=`docker ps -q --filter name=awdwr-mysql`.chomp
    system "docker stop #{container}" unless container.empty?
  end
end

namespace :awdwr do
  task :build => 'mysql:setup' do
    sh 'docker build -t awdwr-main --network=host .'
  end

  task :ssh do
    unless `docker image ls`.include? 'awdwr-main'
      Rake::Task["awdwr:build"].execute
    end

    if `docker ps -a`.include? 'awdwr-main'
      if `docker ps -q --filter name=awdwr-main`.chomp.empty?
        container=`docker ps -aq --filter name=awdwr-main`.chomp
        system "docker start #{container}"
      end

      system "docker exec -it awdwr-main bash"
    else
      awdwr = File.expand_path("..", __dir__)
      sh "docker run -p 3333:3333 -v #{awdwr}:/srv/awdwr:delegated " +
        '--name awdwr-main -it awdwr-main /bin/bash'
    end
  end

  task :test => :build do
    if `docker container ls`.include? 'awdwr-main'
      system 'docker exec -it awdwr-main bash --login -i -c testrails'
    else
      sh 'docker run -p 6000:6000 --name awdwr-main ' +
        '-it awdwr-main /bin/bash --login -i -c testrails'
    end
  end

  task :kill do
    next unless `docker ps`.include? 'awdwr-main'
    container=`docker ps -q --filter name=awdwr-main`.chomp
    system "docker container kill #{container}" unless container.empty?
  end

  task :clean => :kill do
    container=`docker ps -aq --filter name=awdwr-main`.chomp
    system "docker container rm #{container}" unless container.empty?
  end

  task :clobber => :clean do
    next unless `docker image ls`.include? 'awdwr-main'
    system "docker image rm awdwr-main"
  end
end

task :clean do
  sh 'docker container prune --force'
  sh 'docker image prune --force'
end

task :clobber do
  Rake::Task["awdwr:clobber"].execute
  Rake::Task["mysql:clobber"].execute
  Rake::Task["clean"].execute
end

task :default => 'awdwr:build'
