#
# Change directory, ruby version, and checkout the branches associated
# with the specified version of [book, ruby, rails].
#

dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

export GORP_RAILS=$HOME/git/rails

if [[ "$@" = "book" ]]; then
  set book 40 200
fi

if [[ "$@" = "gems" ]]; then
  ruby $HOME/git/awdwr/bootstrap.rb
  return 0
fi

if [[ -n "$rvm_path" ]]; then
  rvm use system > /dev/null
else
  export RBENV_VERSION=system
fi

eval $(ruby <<__return
  require 'yaml'
  testrails = YAML.load_file('$dir/testrails.yml')
  git = testrails['git'] || '$HOME/git'

  require 'shellwords'
  require "#{git}/awdwr/bootstrap"

  # read configuration
  profile = config(testrails, %($@))
  puts "ruby=#{Shellwords.escape(profile['ruby']['bin'])};"

  # change to the target directory
  puts "cd #{profile['source']}/#{profile['work']};"
  puts 'export GORP_WORK=`pwd`;'

  # set up an alias for rails
  if File.exist? "$GORP_RAILS/railties/bin/rails"
    puts 'alias rails="ruby -rubygems $GORP_RAILS/railties/bin/rails";'
  elsif File.exist? "$GORP_RAILS/bin/rails"
    puts 'alias rails="ruby -rubygems $GORP_RAILS/bin/rails";'
  end

  # change to the desired rails branch
  Dir.chdir '$GORP_RAILS' do
    STDERR.write "\033[34mrails\033[00m: "
    system "git checkout #{profile['branch']} > /dev/null"
  end

  # infer dependencies
  require "#{git}/awdwr/bootstrap"
  gems, libs, repos = dependencies("#{git}/rails", RUBY_VERSION)

  # fetch the desired branch for each dependency
  libs.sort.each do |lib, branch|
    next if lib == 'rails'
    STDERR.write "\033[34m#{lib}\033[00m: "
    Dir.chdir "#{git}/#{lib}" do
      system "git checkout #{branch} > /dev/null"
    end
  end

  # set up rubylibs
  puts "export RUBYLIB=#{libs.keys.map {|lib| "#{git}/#{lib}"}.join(':')}"
__return
)

# select desired ruby
if [[ -n "$ruby" ]]; then
  if [[ -n "$rvm_path" ]]; then
    unset rvm_ruby_sha
    [[ -e $rvm_path/rvm/scripts/rvm ]] && source $rvm_path/rvm/scripts/rvm
    ruby=$(cd $rvm_path/rubies; ls -d $ruby | tail -1)
    rvm use $ruby
  else
    export RBENV_VERSION=$(cd $RBENV_ROOT/versions; ls -d $ruby | tail -1)
  fi
fi

unset ruby dir
